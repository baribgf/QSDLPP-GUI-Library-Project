#ifndef QSDLPP_FRAME
#define QSDLPP_FRAME

#pragma once

#ifndef QSDLPP_RUICOMPONENT
#include "../../QSDL++/RUIComponent"
#endif

class Frame : public RUIComponent
{
protected:
    int scrollBarWidth;
    bool overflowX, overflowY, movingScrollBarV, movingScrollBarH, overrideCompInsideBounds,
        topBorderVisible, bottomBorderVisible, leftBorderVisible, rightBorderVisible;
    int scrollBarMovingDistY, scrollBarMovingDistX, scrollBarMovingStartY, scrollBarMovingStartX;
    Color bg, bordersColor;
    vector<RUIComponent *> members;
    SDL_PixelFormat *pf;

    bool insideVScrollBarArea(int x, int y);
    bool insideHScrollBarArea(int x, int y);
    void onMousePressed(Event e) override;
    void onMouseReleased(Event e) override;
    void onMouseMotion(Event e) override;
    void onMouseLeaved(Event e) override;

    void drawVScrollBar();
    void drawHScrollBar();

    void drawBorders();

public:
    SDL_Rect viewport;

    Frame(RUIComponent *parent, int width, int height);
    virtual ~Frame();

    Color getBg();
    vector<RUIComponent *> getMembers();
    bool isOverflowX();
    bool isOverflowY();
    bool insideBounds(int x, int y) override;

    void setBg(Color bg);

    void setSize(Uint16 width, Uint16 height) override;
    void setViewport(int x, int y, int w, int h);
    void setOverflowX(bool ovf);
    void setOverflowY(bool ovf);

    void update();
    void scrollV(int step);
    void scrollH(int step);
    void add(RUIComponent *component);
    void pop(RUIComponent *component);
    void clear();
    void allowEventPropagation(bool allow);
    void setBordersVisible(bool top, bool right, bool bottom, bool left);
    void setBordersVisible(bool visible);
    void setBordersColor(Color color);
    void setScrollBarWidth(int width);

    void invokeEvents(Event e) override;
};

#endif
